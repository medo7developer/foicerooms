import 'dart:developer';
import 'package:supabase_flutter/supabase_flutter.dart';

/// ุฎุฏูุฉ ููุทู ุงููุนุจุฉ - ุจุฏุก ุงููุนุจุฉุ ุฅุฏุงุฑุฉ ุงูุฌููุงุชุ ุงูุชูุงุก ุงููุนุจุฉ
class GameLogicService {
  final SupabaseClient _client = Supabase.instance.client;

  // ูุงุฆูุฉ ุงููููุงุช ุงููุณุชุฎุฏูุฉ ูู ุงููุนุจุฉ
  static const List<String> gameWords = [
    'ูุฏุฑุณุฉ', 'ูุณุชุดูู', 'ูุทุนู', 'ููุชุจุฉ', 'ุญุฏููุฉ',
    'ุจูู', 'ุตูุฏููุฉ', 'ุณูู', 'ุณูููุง', 'ูุชุญู',
    'ุดุงุทุฆ', 'ุฌุจู', 'ุบุงุจุฉ', 'ุตุญุฑุงุก', 'ููุฑ',
    'ุทุงุฆุฑุฉ', 'ุณูุงุฑุฉ', 'ูุทุงุฑ', 'ุณูููุฉ', 'ุฏุฑุงุฌุฉ',
    'ุทุจูุจ', 'ูุฏุฑุณ', 'ูููุฏุณ', 'ุทุจุงุฎ', 'ููุงู',
  ];

  /// ุงูุชุญูู ูู ุฅููุงููุฉ ุจุฏุก ุงููุนุจุฉ
  Future<bool> canStartGame(String roomId, String creatorId) async {
    try {
      final room = await _client
          .from('rooms')
          .select('creator_id, state, players!inner(*)')
          .eq('id', roomId)
          .maybeSingle();

      if (room == null || room['creator_id'] != creatorId) {
        return false;
      }

      if (room['state'] != 'waiting') {
        return false;
      }

      final players = room['players'] as List;
      final connectedCount = players.where((p) => p['is_connected'] == true).length;

      return connectedCount >= 3;
    } catch (e) {
      log('ุฎุทุฃ ูู ุงูุชุญูู ูู ุฅููุงููุฉ ุจุฏุก ุงููุนุจุฉ: $e');
      return false;
    }
  }

  /// ุจุฏุก ุงููุนุจุฉ ุจูุงุณุทุฉ ููุดุฆ ุงูุบุฑูุฉ
  Future<bool> startGameByCreator(String roomId, String creatorId) async {
    try {
      // ุงูุชุญูู ูู ุฃู ุงููุณุชุฎุฏู ูู ูุงูู ุงูุบุฑูุฉ
      final room = await _client
          .from('rooms')
          .select('creator_id, state, players!inner(*)')
          .eq('id', roomId)
          .maybeSingle();

      if (room == null) {
        log('ุงูุบุฑูุฉ ุบูุฑ ููุฌูุฏุฉ: $roomId');
        return false;
      }

      if (room['creator_id'] != creatorId) {
        log('ุงููุณุชุฎุฏู $creatorId ุบูุฑ ูุฎูู ูุจุฏุก ุงููุนุจุฉ');
        return false;
      }

      if (room['state'] != 'waiting') {
        log('ุงููุนุจุฉ ููุณุช ูู ุญุงูุฉ ุงูุงูุชุธุงุฑ: ${room['state']}');
        return false;
      }

      final players = room['players'] as List;
      final connectedPlayers = players.where((p) => p['is_connected'] == true).toList();

      if (connectedPlayers.length < 3) {
        log('ุนุฏุฏ ุงููุงุนุจูู ุงููุชุตููู ุบูุฑ ูุงูู: ${connectedPlayers.length}');
        return false;
      }

      // ุงุฎุชูุงุฑ ุงูุฌุงุณูุณ ูุงููููุฉ
      final wordsToUse = List<String>.from(gameWords);

      // ุฎูุท ุงููุงุนุจูู ูุงุฎุชูุงุฑ ุงูุฌุงุณูุณ
      connectedPlayers.shuffle();
      final spyIndex = DateTime.now().millisecond % connectedPlayers.length;
      final spyId = connectedPlayers[spyIndex]['id'];

      wordsToUse.shuffle();
      final selectedWord = wordsToUse.first;

      // ุชุญุฏูุซ ุญุงูุฉ ุงูุบุฑูุฉ
      await _client.from('rooms').update({
        'state': 'playing',
        'current_round': 1,
        'spy_id': spyId,
        'current_word': selectedWord,
        'round_start_time': DateTime.now().toIso8601String(),
        'ready_to_start': false,
      }).eq('id', roomId);

      // ุชุญุฏูุซ ุฃุฏูุงุฑ ุฌููุน ุงููุงุนุจูู ุงููุชุตููู ููุท
      for (final player in connectedPlayers) {
        await _client.from('players').update({
          'role': player['id'] == spyId ? 'spy' : 'normal',
          'votes': 0,
          'is_voted': false,
        }).eq('id', player['id']);
      }

      log('ุชู ุจุฏุก ุงููุนุจุฉ ูู ุงูุบุฑูุฉ $roomId ูุน ${connectedPlayers.length} ูุงุนุจูู');
      log('ุงูุฌุงุณูุณ: $spyIdุ ุงููููุฉ: $selectedWord');

      return true;
    } catch (e) {
      log('ุฎุทุฃ ูู ุจุฏุก ุงููุนุจุฉ: $e');
      return false;
    }
  }

  /// ุจุฏุก ุงููุนุจุฉ (ุฏุงูุฉ ุฃุณุงุณูุฉ)
  Future<void> startGame(String roomId, String spyId, String word) async {
    try {
      await _client.from('rooms').update({
        'state': 'playing',
        'current_round': 1,
        'spy_id': spyId,
        'current_word': word,
        'round_start_time': DateTime.now().toIso8601String(),
      }).eq('id', roomId);

      log('ุชู ุจุฏุก ุงููุนุจุฉ ูู ุงูุบุฑูุฉ $roomId');
    } catch (e) {
      log('ุฎุทุฃ ูู ุจุฏุก ุงููุนุจุฉ: $e');
    }
  }

  /// ุงูุชูุงุก ุงูุฌููุฉ ูุงูุงูุชูุงู ููุชุตููุช
  Future<bool> endRoundAndStartVoting(String roomId) async {
    try {
      // ุงูุชุญูู ูู ุญุงูุฉ ุงูุบุฑูุฉ ุงูุญุงููุฉ
      final currentRoom = await _client
          .from('rooms')
          .select('state, current_round')
          .eq('id', roomId)
          .maybeSingle();

      if (currentRoom == null || currentRoom['state'] != 'playing') {
        log('ุงูุบุฑูุฉ ุบูุฑ ุตุงูุญุฉ ููุงูุชูุงู ููุชุตููุช: ${currentRoom?['state']}');
        return false;
      }

      // ุชุญุฏูุซ ุงูุญุงูุฉ ุฅูู ุงูุชุตููุช ููุท ุฅุฐุง ูุงูุช ูู ุญุงูุฉ ุงููุนุจ
      await _client.from('rooms').update({
        'state': 'voting',
        'round_start_time': null, // ุฅุฒุงูุฉ ููุช ุจุฏุก ุงูุฌููุฉ
        'updated_at': DateTime.now().toIso8601String(),
      }).eq('id', roomId).eq('state', 'playing'); // ุดุฑุท ุฅุถุงูู ููุชุฃูุฏ

      // ุฅุนุงุฏุฉ ุชุนููู ุฃุตูุงุช ุฌููุน ุงููุงุนุจูู
      await _client.from('players').update({
        'votes': 0,
        'is_voted': false,
      }).eq('room_id', roomId);

      log('ุชู ุงูุงูุชูุงู ููุชุตููุช ูู ุงูุบุฑูุฉ $roomId');
      return true;
    } catch (e) {
      log('ุฎุทุฃ ูู ุงูุชูุงุก ุงูุฌููุฉ: $e');
      return false;
    }
  }

  /// ุฅููุงุก ุงููุนุจุฉ
  Future<void> endGame(String roomId, String winner) async {
    try {
      await _client.from('rooms').update({
        'state': 'finished',
        'winner': winner,
        'updated_at': DateTime.now().toIso8601String(),
      }).eq('id', roomId);
      log('ุงูุชูุช ุงููุนุจุฉ ูู ุงูุบุฑูุฉ $roomId - ุงููุงุฆุฒ: $winner');
    } catch (e) {
      log('ุฎุทุฃ ูู ุฅููุงุก ุงููุนุจุฉ: $e');
    }
  }

  /// ุจุฏุก ุงูุชุตููุช ุนูู ุฅููุงู ุงูุฌููุงุช
  Future<void> startContinueVoting(String roomId, int nextRound, List<dynamic> remainingPlayers) async {
    try {
      log('๐ณ๏ธ ุจุฏุก ุงูุชุตููุช ุนูู ุฅููุงู ุงูุฌููุงุช ูู ุงูุบุฑูุฉ: $roomId');

      // ุชุญุฏูุซ ุญุงูุฉ ุงูุบุฑูุฉ ููุชุตููุช ุนูู ุงูุฅููุงู
      await _client.from('rooms').update({
        'state': 'continue_voting',
        'next_round': nextRound,
        'round_start_time': null, // ุฅุฒุงูุฉ ููุช ุงูุฌููุฉ
        'updated_at': DateTime.now().toIso8601String(),
      }).eq('id', roomId);

      // ุฅุนุงุฏุฉ ุชุนููู ุญุงูุฉ ุงูุชุตููุช ูุฌููุน ุงููุงุนุจูู ุงููุชุจููู
      for (final player in remainingPlayers) {
        await _client.from('players').update({
          'is_voted': false,
          'votes': 0, // ุณูุณุชุฎุฏู votes ูุญูุธ ุฎูุงุฑ ุงูุฅููุงู (1 = ุฅููุงูุ 0 = ุฅููุงุก)
        }).eq('id', player['id']);
      }

      log('โ ุชู ุจุฏุก ุงูุชุตููุช ุนูู ุฅููุงู ุงูุฌููุงุช - ุงููุงุนุจูู: ${remainingPlayers.length}');

      // ุงูุชุญูู ูู ุฃู ุงูุชุญุฏูุซ ุชู ุจูุฌุงุญ
      final verification = await _client
          .from('rooms')
          .select('state')
          .eq('id', roomId)
          .maybeSingle();

      log('โ ุชุฃููุฏ ุญุงูุฉ ุงูุบุฑูุฉ: ${verification?['state']}');

    } catch (e) {
      log('โ ุฎุทุฃ ูู ุจุฏุก ุชุตููุช ุงูุฅููุงู: $e');
      rethrow;
    }
  }
  
  /// ุงูุงุณุชูุงุน ูุชุญุฏูุซุงุช ุงูุบุฑูุฉ
  Stream<Map<String, dynamic>> listenToRoom(String roomId) {
    return _client
        .from('rooms')
        .stream(primaryKey: ['id'])
        .eq('id', roomId)
        .map((List<Map<String, dynamic>> data) => data.isNotEmpty ? data.first : {});
  }

  /// ุฅููุงุก ุงููุนุจุฉ ูุน ุนุฑุถ ุงูุฌุงุณูุณ ุงูุญูููู (ุฏุงูุฉ ุฌุฏูุฏุฉ)
// ุชุญุฏูุซ ุฏุงูุฉ endGameAndRevealSpy
  Future<void> endGameAndRevealSpy(String roomId, String winner, String? spyId) async {
    try {
      await _client.from('rooms').update({
        'state': 'finished',
        'winner': winner,
        'revealed_spy_id': spyId,
        'game_ended_at': DateTime.now().toIso8601String(), // ุฅุถุงูุฉ ููุช ุงูุชูุงุก ุงููุนุจุฉ
        'updated_at': DateTime.now().toIso8601String(),
      }).eq('id', roomId);

      log('ุงูุชูุช ุงููุนุจุฉ ูู ุงูุบุฑูุฉ $roomId - ุงููุงุฆุฒ: $winner - ุงูุฌุงุณูุณ ุงูููุดูู: $spyId');
    } catch (e) {
      log('ุฎุทุฃ ูู ุฅููุงุก ุงููุนุจุฉ ูุน ุนุฑุถ ุงูุฌุงุณูุณ: $e');
      rethrow;
    }
  }

  /// ุงูุชุญูู ูู ุงูุชูุงุก ุชุตููุช ุงูุฅููุงู ููุนุงูุฌุฉ ุงููุชูุฌุฉ (ุชุญุฏูุซ)
  Future<void> processContinueVotingResult(String roomId) async {
    try {
      log('๐ ุงูุชุญูู ูู ูุชุงุฆุฌ ุงูุชุตููุช ุนูู ุงูุฅููุงู ูู ุงูุบุฑูุฉ: $roomId');

      final roomData = await _client
          .from('rooms')
          .select('next_round, spy_id, players!inner(*)')
          .eq('id', roomId)
          .eq('state', 'continue_voting')
          .maybeSingle();

      if (roomData == null) {
        log('โ ุงูุบุฑูุฉ ุบูุฑ ููุฌูุฏุฉ ุฃู ููุณุช ูู ุญุงูุฉ ุชุตููุช ุงูุฅููุงู');
        return;
      }

      final players = roomData['players'] as List;
      final connectedPlayers = players.where((p) => p['is_connected'] == true).toList();
      final votedPlayers = connectedPlayers.where((p) => p['is_voted'] == true).toList();

      // ุงูุชุญูู ูู ุฃู ุฌููุน ุงููุงุนุจูู ุตูุชูุง
      if (votedPlayers.length < connectedPlayers.length) {
        log('โณ ูู ูุตูุช ุฌููุน ุงููุงุนุจูู ุจุนุฏ: ${votedPlayers.length}/${connectedPlayers.length}');
        return;
      }

      // *** ูุญุต ุนุฏุฏ ุงููุงุนุจูู ุงููุชุจููู ูุจู ุงูุชุตููุช ***
      if (connectedPlayers.length < 3) {
        final remainingSpies = connectedPlayers.where((p) => p['role'] == 'spy').toList();
        final winner = remainingSpies.isNotEmpty ? 'spy' : 'normal_players';
        log('๐ ุนุฏุฏ ุงููุงุนุจูู ุฃูู ูู 3 - ุฅููุงุก ุงููุนุจุฉ - ุงููุงุฆุฒ: $winner');
        await endGameAndRevealSpy(roomId, winner, roomData['spy_id']);
        return;
      }

      // ุญุณุงุจ ุงูุฃุตูุงุช
      final continueVotes = votedPlayers.where((p) => p['votes'] == 1).length;
      final endVotes = votedPlayers.where((p) => p['votes'] == 0).length;
      final nextRound = roomData['next_round'] ?? 2;

      log('๐ ูุชุงุฆุฌ ุงูุชุตููุช - ุฅููุงู: $continueVotesุ ุฅููุงุก: $endVotes');

      if (continueVotes > endVotes) {
        // ุงูุฃุบูุจูุฉ ุชุฑูุฏ ุงูุฅููุงู - ุชุญูู ูู ุนุฏุฏ ุงููุงุนุจูู ูุฑุฉ ุฃุฎุฑู
        if (connectedPlayers.length >= 3) {
          log('โถ๏ธ ุงูุฃุบูุจูุฉ ุชุฑูุฏ ุงูุฅููุงู - ุจุฏุก ุงูุฌููุฉ: $nextRound');
          await startNewRound(roomId, nextRound, connectedPlayers);
        } else {
          // ุญุชู ูู ุฃุฑุงุฏูุง ุงูุฅููุงูุ ุงูุนุฏุฏ ุบูุฑ ูุงูู
          final remainingSpies = connectedPlayers.where((p) => p['role'] == 'spy').toList();
          final winner = remainingSpies.isNotEmpty ? 'spy' : 'normal_players';
          log('๐ ุงูุนุฏุฏ ุบูุฑ ูุงูู ููุฅููุงู - ุฅููุงุก ุงููุนุจุฉ - ุงููุงุฆุฒ: $winner');
          await endGameAndRevealSpy(roomId, winner, roomData['spy_id']);
        }
      } else {
        // ุงูุฃุบูุจูุฉ ุชุฑูุฏ ุงูุฅููุงุก ุฃู ุชุนุงุฏู
        final remainingSpies = connectedPlayers.where((p) => p['role'] == 'spy').toList();
        final winner = remainingSpies.isNotEmpty ? 'spy' : 'normal_players';
        log('๐ ุงูุฃุบูุจูุฉ ุชุฑูุฏ ุงูุฅููุงุก - ุงููุงุฆุฒ: $winner');
        await endGameAndRevealSpy(roomId, winner, roomData['spy_id']);
      }

    } catch (e) {
      log('โ ุฎุทุฃ ูู ูุนุงูุฌุฉ ูุชุงุฆุฌ ุชุตููุช ุงูุฅููุงู: $e');
      rethrow;
    }
  }

  /// ุจุฏุก ุฌููุฉ ุฌุฏูุฏุฉ ูุน ูุญุต ุนุฏุฏ ุงููุงุนุจูู (ุชุญุฏูุซ)
  Future<void> startNewRound(String roomId, int roundNumber, List<dynamic> players) async {
    try {
      // ูุญุต ุนุฏุฏ ุงููุงุนุจูู ุงููุชุตููู
      final connectedPlayers = players.where((p) => p['is_connected'] == true).toList();

      if (connectedPlayers.length < 3) {
        log('โ ุนุฏุฏ ุงููุงุนุจูู ุงููุชุตููู ุบูุฑ ูุงูู ูุจุฏุก ุฌููุฉ ุฌุฏูุฏุฉ: ${connectedPlayers.length}');

        // ุงูุญุตูู ุนูู ูุนูููุงุช ุงูุฌุงุณูุณ ุงูุญุงูู
        final roomData = await _client
            .from('rooms')
            .select('spy_id')
            .eq('id', roomId)
            .maybeSingle();

        final remainingSpies = connectedPlayers.where((p) => p['role'] == 'spy').toList();
        final winner = remainingSpies.isNotEmpty ? 'spy' : 'normal_players';
        await endGameAndRevealSpy(roomId, winner, roomData?['spy_id']);
        return;
      }

      // ุงุฎุชูุงุฑ ุฌุงุณูุณ ุฌุฏูุฏ
      connectedPlayers.shuffle();
      final newSpyIndex = DateTime.now().millisecond % connectedPlayers.length;
      final newSpyId = connectedPlayers[newSpyIndex]['id'];

      // ุงุฎุชูุงุฑ ูููุฉ ุฌุฏูุฏุฉ
      final wordsToUse = List<String>.from(gameWords);
      wordsToUse.shuffle();
      final newWord = wordsToUse.first;

      // ุชุญุฏูุซ ุงูุบุฑูุฉ
      await _client.from('rooms').update({
        'state': 'playing',
        'current_round': roundNumber,
        'spy_id': newSpyId,
        'current_word': newWord,
        'round_start_time': DateTime.now().toIso8601String(),
        'updated_at': DateTime.now().toIso8601String(),
      }).eq('id', roomId);

      // ุฅุนุงุฏุฉ ุชุนููู ุฌููุน ุงููุงุนุจูู
      for (final player in connectedPlayers) {
        await _client.from('players').update({
          'role': player['id'] == newSpyId ? 'spy' : 'normal',
          'votes': 0,
          'is_voted': false,
        }).eq('id', player['id']);
      }

      log('ุจุฏุฃุช ุฌููุฉ ุฌุฏูุฏุฉ: $roundNumber ูู ุงูุบุฑูุฉ: $roomId ูุน ${connectedPlayers.length} ูุงุนุจูู');
    } catch (e) {
      log('ุฎุทุฃ ูู ุจุฏุก ุฌููุฉ ุฌุฏูุฏุฉ: $e');
      rethrow;
    }
  }

  /// ุฅููุงุก ุงููุนุจุฉ ูุน ูุนุงูุฌุฉ ุงูููุงูุขุช
  Future<void> endGameWithRewards(String roomId, String winner, String? spyId) async {
    try {
      // ุฅููุงุก ุงููุนุจุฉ ุนุงุฏู
      await endGameAndRevealSpy(roomId, winner, spyId);

      // ุฅุดุงุฑุฉ ููุนุงูุฌุฉ ุงูููุงูุขุช ูู ุงูููุฏูุฉ
      await _client.from('rooms').update({
        'process_rewards': true,
        'updated_at': DateTime.now().toIso8601String(),
      }).eq('id', roomId);

      log('ุชู ุชุญุฏูุฏ ุงููุนุจุฉ ููุนุงูุฌุฉ ุงูููุงูุขุช: $roomId');
    } catch (e) {
      log('ุฎุทุฃ ูู ุฅููุงุก ุงููุนุจุฉ ูุน ุงูููุงูุขุช: $e');
      rethrow;
    }
  }

}